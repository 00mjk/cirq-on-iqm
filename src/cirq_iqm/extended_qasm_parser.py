# Copyright 2020â€“2021 Cirq on IQM developers
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
Extends the OpenQASM 2.0 language by gates native to the IQM architectures.
"""
from __future__ import annotations
import cirq
from cirq.contrib.qasm_import._parser import QasmParser
from cirq.contrib.qasm_import._parser import QasmGateStatement, QasmParser
from cirq import ops


def PhasedRxGate(p1: cirq.value.TParamVal, p2: cirq.value.TParamVal) -> cirq.ops.ISwapPowGate:
    r"""Rotation around the XX+YY axis of the two-qubit Hilbert space.
    Generated by the Hamiltonian :math:`H_{\text{XY}} = X \otimes X +Y \otimes Y`.
    .. math::
       \text{XY}(p) = \exp(-i H_{\text{XY}} \: \frac{\pi}{2} \: p), \quad \text{where} \: p \in [0, 2).
    Args:
        p1: group parameter
    Returns:
        corresponding Cirq gate
    """
    return ops.PhasedXPowGate(phase_exponent=p1, exponent=-2 * p2, global_shift=0)


def circuit_from_qasm(qasm: str) -> cirq.circuits.Circuit:
    """Parses an OpenQASM 2.0 program to a Cirq circuit.

   TODO The previous functionality that contained additional 2-qubit gates has now been removed as obsolete.
        This function remains because new parsing logic will be introduced in a future PR.

    Args:
        qasm: OpenQASM string

    Returns:
        parsed circuit
    """
    parser = QasmParser()
    parser.all_gates['U'] = QasmGateStatement(
        qasm_gate='U',
        cirq_gate=lambda params: PhasedRxGate(params[0], params[1]),
        num_params=3,
        num_args=1
    )
    return parser.parse(qasm).circuit
